{"version":3,"sources":["components/header/index.tsx","components/education/index.tsx","components/csprojects/projects.ts","components/csprojects/index.tsx","components/work-experience/jobs.ts","components/work-experience/jobHistory.tsx","components/work-experience/index.tsx","components/skills/index.tsx","components/skills/skills.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","Education","projects","text","CsProjects","map","project","index","key","jobs","title","employer","location","dates","statements","JobHistory","job","statement","WorkExperience","Skills","knowledgeable","familiar","skill","RelevantSkills","knowledgable","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAGaA,G,gBAAmB,WAC7B,OACG,yBAAKC,UAAU,UACZ,2CACA,6BACA,0BAAMA,UAAU,SAAhB,oBCLIC,EAAsB,WAChC,OACG,yBAAKD,UAAU,oBACZ,yBAAKA,UAAU,cACZ,0BAAMA,UAAU,QAAhB,aACA,uDACA,0BAAMA,UAAU,cAAhB,2BAEH,yBAAKA,UAAU,eACZ,2CACA,8CCbCE,G,MAAW,CACrB,CACGC,KAAM,4JAET,CACGA,KAAM,qGAET,CACGA,KAAM,8DAET,CACGA,KAAM,6FAET,CACGA,KAAM,iFCNCC,EAAuB,WACjC,OACG,yBAAKJ,UAAU,cACZ,0BAAMA,UAAU,QAAhB,6BACA,4BACiBE,EAOPG,KAAI,SAACC,EAASC,GAAV,OAAmB,wBAAIC,IAAKD,GAAQD,EAAQH,YCZ5D,IAAMM,EAAe,CACzB,CACGC,MAAO,qBACPC,SAAU,OACVC,SAAU,YACVC,MAAO,qBACPC,WAAY,CACT,wFACA,0EACA,qEACA,8KAGN,CACGJ,MAAO,4BACPC,SAAU,0BACVC,SAAU,YACVC,MAAO,sBACPC,WAAY,CACT,iHACA,uKACA,iIACA,kEACA,qIACA,yGCxBIC,EAAkC,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,IAC9C,OACG,yBAAKhB,UAAU,gBACZ,yBAAKA,UAAU,oBACZ,yBAAKA,UAAU,cACZ,0BAAMA,UAAU,cAAcgB,EAAIL,UAClC,0BAAMX,UAAU,SAASgB,EAAIN,QAEhC,yBAAKV,UAAU,qBACZ,8BAAOgB,EAAIH,OACX,8BAAOG,EAAIJ,YAGjB,wBAAIZ,UAAU,SACVgB,EAAIF,WAAWT,KAAI,SAACY,EAAWV,GAAZ,OAAqB,wBAAIC,IAAa,GAARD,GAAaU,SChB9DC,G,MAA2B,WACrC,OACG,yBAAKlB,UAAU,kBACZ,0BAAMA,UAAU,QAAhB,4BACUS,EAMJJ,KAAI,SAACW,EAAKT,GAAN,OAAe,kBAAC,EAAD,CAAYC,IAAKD,EAAOS,IAAKA,UCRxD,IAAMG,EAA2B,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,SACtD,OACG,yBAAKrB,UAAU,gBACZ,0BAAMA,UAAU,QAAhB,mBAA6C,6BAC7C,mDACA,yBAAKA,UAAU,SACXoB,EAAcf,KAAI,SAACiB,GACjB,OAAO,0BAAMtB,UAAU,UAAUsB,OAGvC,gDACA,yBAAKtB,UAAU,SACXqB,EAAShB,KAAI,SAACiB,GACZ,OAAO,0BAAMtB,UAAU,UAAUsB,SCrBnCC,EAAiB,CAC3BC,aAAc,CAAC,aAAc,aAAc,MAAO,OAAQ,gBAAiB,SAAU,SACrFH,SAAU,CAAC,SAAU,QAAS,OAAQ,MAAO,oBCmBjCI,EAZO,WACpB,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQoB,cAAeG,EAAeC,aAAcH,SAAUE,EAAeF,aCJ/DK,QACW,cAA7BC,OAAOf,SAASgB,UAEe,UAA7BD,OAAOf,SAASgB,UAEhBD,OAAOf,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.42048e32.chunk.js","sourcesContent":["import React from 'react';\nimport \"./headerStyles.css\"\n\nexport const Header: React.FC = () =>{\n   return(\n      <div className=\"header\">\n         <h1>Zach Hawkes</h1>\n         <hr></hr>\n         <span className=\"email\">zach@ifit.com</span>\n      </div>\n   );\n}","import React from 'react';\nimport '../../App.css';\n\nexport const Education: React.FC = () =>{\n   return(\n      <div className=\"flexboxContainer\">\n         <div className=\"leftColumn\">\n            <span className=\"bold\">EDUCATION</span>\n            <span>Utah State University</span>\n            <span className=\"bold tabIn\">B.S., Computer Science</span>\n         </div>\n         <div className=\"rightColumn\">\n            <span>Logan, UT</span>\n            <span>May, 2021</span>\n         </div>\n      </div>\n   )\n}\n","export const projects = [\n   {\n      text: \"Worked as part of a group to design, document, and implement a movie-renting web app using Python, Django, Javascript, and publicly available APIâ€™s\"\n   }, \n   {\n      text: \"Used C++ to build programs that solved solutions in the same manner as the Linux operating system\"\n   }, \n   {\n      text: \"Built a static business website using Javascript and React\"\n   }, \n   {\n      text: \"Used data structures to dramatically increase performance of custom Google Sheets scripts\"\n   }, \n   {\n      text: \"Solved numerous online coding challenges on codewars.com and hackerrank.com\"\n   }\n]","import React from \"react\";\nimport \"./csprojects.css\"\nimport { projects } from \"./projects\";\n\ninterface project {\n   text: string\n}\n\nexport const CsProjects: React.FC = () => {\n   return(\n      <div className=\"csprojects\">\n         <span className=\"bold\">COMPUTER SCIENCE PROJECTS</span>\n         <ul>\n            {listProjects(projects)}\n         </ul>\n      </div>\n   )\n}\n\nfunction listProjects(projects: project[]){\n   return projects.map((project, index) =><li key={index}>{project.text}</li>)\n}","export interface IJob {\n   title: string;\n   dates: string;\n   employer: string;\n   statements: string[];\n   location: string;\n}\n\nexport const jobs: IJob[] = [\n   {\n      title: \"Software QA Tester\",\n      employer: \"iFit\",\n      location: \"Logan, UT\", \n      dates: \"Feb 2018 - Present\", \n      statements: [\n         \"Worked with developers to diagnose flaws in software and identify potential solutions\",\n         \"Developed comprehensive testing plans to identify flaws within software\",\n         \"Created automated tests to enhance testing coverage and efficiency\",\n         \"Trained with a senior developer to create a microservice which identifies the location of an ip address and coded other solutions using technology currently used by iFit\"\n      ]\n   },\n   {\n      title: \"Knowledge Base Specialist\",\n      employer: \"ICON Health and Fitness\",\n      location: \"Logan, UT\", \n      dates: \"Jan 2015 - Feb 2018\", \n      statements: [\n         \"Authored training material to help customer service agents to diagnose fitness equipment problems on the phone\",\n         \"Taught new customer service agents in a classroom environment how to diagnose issues with fitness equipment, use computer systems, and successfully handle customers\",\n         \"Developed an employee management system using Ruby on Rails and created an online document repository using PHP and Javascript\",\n         \"Assisted new agents while they were on the phone with customers\",\n         \"Managed users and created content for a Learning Management System which was used to train current and new customer service agents\",\n         \"Created and maintained an online computer test for potential new employees using PHP and Javascript\"\n      ]\n   }\n]","import React from \"react\";\nimport \"../../App.css\";\nimport { IJob } from \"./jobs\"\n\ninterface IJobProps {\n   job: IJob;\n}\n\nexport const JobHistory: React.FC<IJobProps> = ({job}: IJobProps) =>{\n   return(\n      <div className=\"jobContainer\">\n         <div className=\"flexboxContainer\">\n            <div className=\"leftColumn\">\n               <span className=\"bold tabIn\">{job.employer}</span>\n               <span className=\"tabIn\">{job.title}</span>\n            </div>\n            <div className=\"rightColumn tabIn\">\n               <span>{job.dates}</span>\n               <span>{job.location}</span>\n            </div>\n         </div>\n         <ul className=\"tabIn\">\n            {job.statements.map((statement, index)=> <li key={index * 10}>{statement}</li>)}\n         </ul>\n      </div>\n   );\n}\n","import React from \"react\";\nimport { jobs, IJob } from \"./jobs\";\nimport { JobHistory } from \"./jobHistory\";\nimport \"./work-experience.css\"\n\n\nexport const WorkExperience: React.FC = () => {\n   return(\n      <div className=\"workExperience\">\n         <span className=\"bold\">RELEVANT WORK EXPERIENCE</span>\n         {listJobs(jobs)}\n      </div>\n   )\n}\n\nfunction listJobs(jobs: IJob[]){\n   return jobs.map((job, index)=> <JobHistory key={index} job={job} />)\n}","import React from \"react\";\nimport \"../../App.css\";\n\ninterface IProps {\n   knowledgeable: string[];\n   familiar: string[];\n}\n\nexport const Skills: React.FC<IProps> = ({knowledgeable, familiar}: IProps) =>{\n   return (\n      <div className=\"sectionTitle\">\n         <span className=\"bold\">Relevant Skills</span><br></br>\n         <span>Knowledgeable in:</span>\n         <div className=\"tabIn\">\n            {knowledgeable.map((skill)=>{\n               return <span className=\"skills\">{skill}</span>;\n            })}\n         </div>\n         <span>Familiar with:</span>\n         <div className=\"tabIn\">\n            {familiar.map((skill)=>{\n               return <span className=\"skills\">{skill}</span>;\n            })}\n         </div>\n      </div>\n   )\n}","export const RelevantSkills = {\n   knowledgable: [\"Typescript\", \"Javascript\", \"C++\", \"Ruby\", \"Ruby on Rails\", \"Python\", \"React\"],\n   familiar: [\"Django\", \"Redux\", \"Java\", \"PHP\", \"Shell Scripting\"]\n}","import React from 'react';\nimport './App.css';\nimport { Header } from \"./components/header/index\"\nimport { Education } from \"./components/education/index\"\nimport { CsProjects } from \"./components/csprojects/index\"\nimport { WorkExperience } from \"./components/work-experience/index\"\nimport { Skills } from \"./components/skills/index\";\nimport { RelevantSkills } from \"./components/skills/skills\"\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Education />\n      <CsProjects />\n      <WorkExperience />\n      <Skills knowledgeable={RelevantSkills.knowledgable} familiar={RelevantSkills.familiar}></Skills>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}